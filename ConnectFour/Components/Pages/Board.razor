﻿@using System.Drawing
@inject GameState State
@inject IJSRuntime JS

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@Pieces[i]"></span>
    }
</div>

<article class="p-5 d-flex justify-content-center">
    <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>    
</article>

@code {
    [Parameter()]
    public Color BoardColor { get; set; }
    = ColorTranslator.FromHtml("#5D6970");

    [Parameter()]
    public Color Player1Color { get; set; }
        = ColorTranslator.FromHtml("#5CADE0");

    [Parameter()]
    public Color Player2Color { get; set; }
        = ColorTranslator.FromHtml("#E0DF5C");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private string[] Pieces = new string[42];
    private string WinnerMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    public string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("turnAlert", CurrentTurn);
        }
    }

    private async Task PlayPiece(byte col)
    {
        ErrorMessage = string.Empty;

        try
        {
            var landingRow = State.PlayPiece(col);
            var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
            Pieces[State.CurrentTurn - 1] = cssClass;
            await JS.InvokeVoidAsync("turnAlert", CurrentTurn);
        }
        catch (ArgumentException ex)
        {
            ErrorMessage = ex.Message;
            await JS.InvokeVoidAsync("turnAlert", "Error, algo salió mal :(");
        }

        WinnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };

        if (WinnerMessage.Contains("Player"))
        {
            await JS.InvokeVoidAsync("winnerAlert", WinnerMessage);
        }
    }
    
    void ResetGame()
    {
        State.ResetBoard();
        WinnerMessage = string.Empty;
        ErrorMessage = string.Empty;
        Pieces = new string[42];
    }
}